name: Execute Terraform apply
inputs:
  aws_account_id:
    type: string
    description: AWS account ID
    required: true
  aws_region:
    type: string
    description: AWS region
    required: true
  action:
    type: string
    description: Terraform action
    required: false
    default: apply-plan
  environment:
    type: string
    description: The GitHub environment name
    required: true
  # repo_owner:
  #   type: string
  #   description: Repository enterprise or organisation
  #   required: false
  #   default: ${{github.repository_owner}}
  # repo_name:
  #   type: string
  #   description: Repository name
  #   required: false
  #   default: ${{github.event.repository.name}}
  # repo_ref:
  #   type: string
  #   description: Repository reference
  #   required: false
  #   default: ${{github.ref_name}}
  # codedir:
  #   type: string
  #   description: The directory of the terraform code to be executed
  #   required: false
  #   default: terraform

runs:
  using: composite
  steps:
    - name: Show inputs
      shell: bash
      run: |
        echo "aws_account_id=${{inputs.aws_account_id}}"
        echo "aws_region=${{inputs.aws_region}}"
        echo "action=${{inputs.action}}"
        echo "environment=${{inputs.environment}}"
        # echo "repo_owner=${{inputs.repo_owner}}"
        # echo "repo_name=${{inputs.repo_name}}"
        # echo "repo_ref=${{inputs.repo_ref}}"
        # echo "codedir=${{inputs.codedir}}"

    # - name: Clone the repository
    #   uses: actions/checkout/@v4
    #   with:
    #     repository: ${{inputs.repo_owner}}/${{inputs.repo_name}}
    #     ref: ${{inputs.repo_ref}}
    #     sparse-checkout: ${{inputs.terraform_codedir}}

    - name: Configure credentials
      uses: aws-actions/configure-aws-credentials/@v4
      with:
        role-to-assume: arn:aws:iam::${{inputs.aws_account_id}}:role/IaC
        aws-region: ${{inputs.aws_region}}

    - name: Install Terraform on runner
      uses: hashicorp/setup-terraform@v3.1.2

    - name: Terraform init
      shell: bash
      # working-directory: ${{inputs.terraform_codedir}}
      working-directory: terraform
      run: | 
        terraform init \
          -backend-config="bucket=tf-state-bucket-${{inputs.aws_account_id}}" \
          -backend-config="key=${{inputs.environment}}-${{github.event.repository.name}}.tfstate" \
          -backend-config="region=${{inputs.aws_region}}" \
          -backend-config="use_lockfile=true" \

    - name: Conditionally set the planning mode to destroy
      if: ${{contains(inputs.action,'destroy')}}
      id: planmode
      shell: bash
      run: echo "value=-destroy" >> $GITHUB_OUTPUT

    - name: Terraform plan (${{inputs.action}})
      # working-directory: ${{inputs.terraform_codedir}}
      working-directory: terraform
      shell: bash
      run: | 
        terraform plan -input=false ${{steps.planmode.outputs.value}}

    - name: Terraform state change (${{inputs.action}})
      if: ${{!endsWith(inputs.action,'-plan')}}
      # working-directory: ${{inputs.terraform_codedir}}
      working-directory: terraform
      shell: bash
      run: | 
        terraform apply -auto-approve -input=false ${{steps.planmode.outputs.value}}
      